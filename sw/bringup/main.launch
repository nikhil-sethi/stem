<launch>
    <arg name="init_x"   default="-1"/>
    <arg name="init_y"   default="0"/>
    <arg name="init_z"   default="0.0"/> 
    <arg name="init_R"   default="0"/>
    <arg name="init_P"   default="0"/>
    <arg name="init_Y"   default="0.0"/> 
    <arg name="map_size_x" default="5"/>
    <arg name="map_size_y" default="5"/>
    <arg name="map_size_z" default="1.7"/>

    <arg name="gui" default="false" />
    <arg name="sim" default="true"/>
    <arg name="planner" default="racer"/>
    <arg name="sim_name" default="sitl"/>
    <arg name="vehicle" default="mantis_depth_vision"/>
    
    <arg name="odometry_topic" default="/mavros/local_position/odom"/>
    
    <!-- enable for perfect odometry -->
    <!-- <arg name="odometry_topic" default="/gazebo/ground_truth/odom"/> -->

    <arg name="sensor_pose_topic" default="/camera/pose"/>
    <!-- <arg if="$(eval sim_name=='perfect')" name="odometry_topic" value="/state_ukf/odom_1"/> -->

    <arg name="depth_topic" value="/camera/aligned_depth_to_color/image_raw"/> 
    <!-- <arg name="depth_topic" value="/camera/depth/image_rect_raw"/>  -->
    <!-- <arg name="depth_topic" value="/camera/aligned_depth_to_color/filled"/>  -->
    
    <!-- So that ros nodes can use it too -->
    <param name="sim" value="$(arg sim)"/>
    <rosparam command='load' file="$(find bringup)/config/params.yaml"/>
    <!-- simulator -->
    <include if="$(arg sim)" file="$(find bringup)/sim.launch">
        <arg name="init_x" value="$(arg init_x)"/>
        <arg name="init_y" value="$(arg init_y)"/>
        <arg name="init_z" value="$(arg init_z)"/>
        <arg name="init_R" value="$(arg init_R)"/>
        <arg name="init_P" value="$(arg init_P)"/>
        <arg name="init_Y" value="$(arg init_Y)"/>
        <arg name="vehicle" default="$(arg vehicle)"/>
        <arg name="gui" default="$(arg gui)" />
    </include>

    <!-- drone toolbox template -->
    <node name="control_if" type="control_interface_node" pkg="control_interface" output="screen" required="true">
        <param name="is_sim" value="$(arg sim)"/>
        <rosparam command="load" file="$(find drone_toolbox_ext_control_template)/config/controller.yaml"/>
    </node>
            

    <!-- Planner -->
    <include file="$(find bringup)/fuel.launch">
        <arg name="sim" value="$(arg sim)"/>
        <arg name="init_x"   value="$(arg init_x)"/>
        <arg name="init_y"   value="$(arg init_y)"/>
        <arg name="init_z"   value="1"/>
        <arg name="map_size_x" value="$(arg map_size_x)"/>
        <arg name="map_size_y" value="$(arg map_size_y)"/>
        <arg name="map_size_z" value="$(arg map_size_z)"/>

        <arg name="odometry_topic" value="$(arg odometry_topic)"/>
        <arg name="depth_topic" value="$(arg depth_topic)"/>
        <arg name="sensor_pose_topic" value="$(arg sensor_pose_topic)"/>
    </include>
    
    <!-- <node ns="$(arg vehicle)" name="attention_map_2d" type="attention_map_2d_node" pkg="attention_map" output="screen" required="true"/> -->
    <node ns="$(arg vehicle)" name="attention_map_2d" type="aruco_segment.py" pkg="semantics" output="screen" required="true"/>
    <node name="motsp_node" type="mo_tsp_node.py" pkg="target_search" output="log" required="true"/>
    <!-- <node name="depth_filler" type="depth_filler_node.py" pkg="img_utils" output="screen" required="true"/> -->
    <include file="$(find bringup)/rviz.launch"/>

    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
   
     <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
     <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
       <remap from="~input" to="/attention_map/local" />
       <remap from="~output" to="/attention_map/local/filtered" />
       <rosparam>
         filter_field_name: ""
         <!-- filter_limit_min: 0.01
         filter_limit_max: 2
         filter_limit_negative: False -->
         leaf_size: 0.1
      </rosparam>
    </node>


</launch>